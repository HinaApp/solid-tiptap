var f = (e, t, o) => {
  if (!t.has(e))
    throw TypeError("Cannot " + o);
};
var E = (e, t, o) => (f(e, t, "read from private field"), o ? o.call(e) : t.get(e)), g = (e, t, o) => {
  if (t.has(e))
    throw TypeError("Cannot add the same private member more than once");
  t instanceof WeakSet ? t.add(e) : t.set(e, o);
}, v = (e, t, o, n) => (f(e, t, "write to private field"), n ? n.call(e, o) : t.set(e, o), o);
import { createSignal as b, createEffect as D, onCleanup as _, createContext as q, useContext as M, createRoot as w } from "solid-js";
import { createComponent as c, Dynamic as p, mergeProps as m, insert as P } from "solid-js/web";
import { createStore as S } from "solid-js/store";
import { NodeView as O } from "@tiptap/core";
function j(e, t, o) {
  return y(e, () => e().isActive(t(), o));
}
function z(e, t) {
  return y(e, () => e().getAttributes(t()));
}
function y(e, t) {
  const [o, n] = b(void 0, { equals: !1 });
  function i() {
    requestAnimationFrame(() => {
      requestAnimationFrame(() => {
        n();
      });
    });
  }
  return D(() => {
    e().on("transaction", i), _(() => {
      e().off("transaction", i);
    });
  }), () => (o(), t());
}
const N = q({
  onDragStart: void 0
});
function F() {
  return M(N);
}
const B = (e) => {
  const t = F();
  return c(p, m(e, {
    get component() {
      return e.component ?? "div";
    },
    ref: (o) => {
      var n;
      (n = t.nodeViewContentRef) == null || n.call(t, o), typeof e.ref == "function" && e.ref(o);
    },
    "data-node-view-content": "",
    get style() {
      return {
        ...e.style,
        "white-space": "pre-wrap"
      };
    }
  }));
}, L = Symbol("Reactive owner property used by tiptap solid as a workaround"), C = (e) => e[L] ?? void 0;
class T extends O {
  constructor(t, o, n) {
    super(t, o, n), w((i) => {
      this.dispose = i;
      const [d, l] = S({
        editor: this.editor,
        node: this.node,
        decorations: this.decorations,
        selected: !1,
        extension: this.extension,
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-call
        getPos: () => this.getPos(),
        updateAttributes: (u = {}) => this.updateAttributes(u),
        deleteNode: () => this.deleteNode()
      });
      this.setProps = l;
      const a = this.node.isInline ? "span" : "div";
      this.rootElement = document.createElement(a);
      const h = (u) => {
        const x = this, V = this.onDragStart.bind(this), A = (R) => {
          this.contentElement = R;
        };
        return c(N.Provider, {
          value: {
            onDragStart: V,
            nodeViewContentRef: A
          },
          get children() {
            return c(p, m({
              get component() {
                return x.component;
              }
            }, u));
          }
        });
      };
      P(this.rootElement, h(d));
      const s = this.rootElement.firstElementChild;
      this.rootElement.replaceWith(s), this.rootElement = s;
    }, C(this.editor));
  }
  get dom() {
    return this.rootElement;
  }
  get contentDOM() {
    return this.node.isLeaf ? null : this.contentElement;
  }
  update(t, o) {
    if (typeof this.options.update == "function") {
      const n = this.node, i = this.decorations;
      return this.node = t, this.decorations = o, this.options.update(n, i);
    }
    return t.type !== this.node.type ? !1 : (t === this.node && this.decorations === o || (this.node = t, this.decorations = o, this.setProps({
      node: t,
      decorations: o
    })), !0);
  }
  selectNode() {
    this.setProps({
      selected: !0
    });
  }
  deselectNode() {
    this.setProps({
      selected: !1
    });
  }
  destroy() {
    this.rootElement && (this.rootElement.textContent = ""), this.dispose(), this.contentElement = null, this.rootElement = null;
  }
}
function G(e, t) {
  return (o) => new T(e, o, t);
}
var r;
class H {
  constructor(t, {
    editor: o,
    props: n,
    as: i = "div",
    className: d = ""
  }) {
    g(this, r, void 0);
    this.id = Math.floor(Math.random() * 4294967295).toString(), this.editor = o, this.element = document.createElement(i), w((l) => {
      const [a, h] = S(n ?? {});
      this.setProps = h, d && this.element.classList.add(...d.split(" ")), P(this.element, c(p, m({
        component: t
      }, a)));
      const s = this.element.firstElementChild;
      this.element.replaceWith(s), this.element = s, v(this, r, l);
    }, C(this.editor));
  }
  updateProps(t) {
    this.setProps({
      ...t
    });
  }
  destroy() {
    E(this, r).call(this), this.element.remove();
  }
}
r = new WeakMap();
export {
  B as NodeViewContent,
  T as SolidNodeView,
  G as SolidNodeViewRenderer,
  H as SolidRenderer,
  j as useEditorActive,
  z as useEditorAttributes
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
